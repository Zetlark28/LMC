(defun one-instruction (state)
  (cond ((null state) nil)
  	((eq (nth 0 state) 'halted-state) (nil))
        ((= (which-instruction state) 1) (add-max state))
        ((= (which-instruction state) 2) (sub-inf state))
        ((= (which-instruction state) 3) (store state))
        ((= (which-instruction state) 5) (load state))
        ((= (which-instruction state) 6) (branch state))
        ((= (which-instruction state) 7) (branch-if-zero state))
        ((= (which-instruction state) 8) (branch-if-pos state))
        ((= (which-instruction state) 0) (halt state))
        ((= (nth (nth 4 state) (nth 6 state) 901) (input state))
        ((= (nth (nth 4 state) (nth 6 state) 902) (output state))

 (T nil)))
    
(defun incrementa-pc (state)
  (cond ((<(nth 4 state) 999) (+ (nth 4 state) 1 ))
  (T 0)))
                     
(defun which-instruction (state)
  (floor (nth (nth 4 state) (nth 6 state)) 100))

(defun mem-instruction (state)
  (mod (nth (nth 4 state) (nth 6 state)) 100))


(defun add-max (state)
	(cond 	((> (+ (nth 2 state) (nth (mem-instruction state) (nth 6 state))) 1000)
 		((lambda (acc flag pc)
				(list 'STATE 
				:acc acc 
				:pc pc 
				:mem (nth 6 state)
				:in (nth 8 state)
				:out (nth 10 state)
				:flag flag ))
				(mod (+ (nth 2 state) (nth (mem-instruction state) (nth 6 state))) 1000) 'flag (incrementa-pc state))

                (T (add-min state))))


(defun add-min (state)
  ((lambda (acc flag pc)
	   (list 'STATE 
	   :acc acc 
           :pc pc 
           :mem (nth 6 state)
	   :in (nth 8 state)
	   :out (nth 10 state)
	   :flag flag ))
	   (+ (nth 2 state) (nth (mem-instruction state) (nth 6 state))) 'noflag (incrementa-pc state)))


(defun sub-inf (state)
   (cond (< (- (nth (mem-instruction state) (nth 6 state)) (nth 2 state)) 0)
        ((lambda (acc flag pc)
            (list 'STATE 
            :acc acc
            :pc pc
            :mem (nth 6 state)
            :in (nth 8 state)
            :out (nth 10 state)
            :flag flag ))
            (+ (- (nth (mem-instruction state) (nth 6 state)) (nth 2 state)) 1000) 'flag (incrementa-state)))

     (T (sub-sup state))))

(defun sub-sup (state)
    ((lambda (acc flag pc)
            (list 'STATE 
            :acc acc
            :pc pc 
            :mem (nth 6 state)
            :in (nth 8 state)
            :out (nth 10 state)
            :flag flag ))
            (- (nth (mem-instruction state) (nth 6 state)) (nth 2 state)) 'noflag (incrementa-pc state)))

(defun branch (state)
  (list 'STATE
  :acc (nth 0 state)
  :pc  (nth (mem-instruction state) (nth 6 state))
  :mem (nth 6 state)
  :in (nth 8 state)
  :out (nth 10 state)
  :flag flag))

(defun branch-if-pos (state)
 (cond (((= (nth 2 state) 0 ) (= (nth 12 state) noflag))
    (list 'STATE 
    :acc (nth 2 state)
    :pc (nth (mem-instruction state) (nth 6 state))
    :mem (nth 6 state)
    :in (nth 8 state)
    :out (nth 10 state)
    :flag (nth 12 state))) 
 ((lambda (pc)
  (list 'STATE 
  :acc (nth 0 state)
  :pc pc
  :mem (nth 6 state)
  :in (nth 8 state)
  :out (nth 10 state)
  :flag (nth 12 state))) 
  (incrementa-pc state))))

(defun branch-if-zero (state)
 (cond (((= (nth 2 state) 0 ) (= (nth 12 state) noflag))
       (list 'STATE  
       :acc (nth 2 state)
       :pc (nth (mem-instruction state) (nth 6 state))
       :mem (nth 6 state)
       :in (nth 8 state)
       :out (nth 10 state)
       :flag (nth 12 state)))
 ((lambda (pc)
  (list 'STATE 
  :acc (nth 0 state9
  :pc pc 
  :mem (nth 6 state)
  :in (nth 8 state)
  :out (nth 10 state)
  :flag (nth 12 state)))
  (incrementaa-pc state))

(defun halt (state) 
 (( lambda (pc) 
   (list 'HALTED-STATE
   :acc (nth 2 state)
   :pc pc 
   :mem (nth 6 state)
   :in (nth 8 state)
   :out (nth 10 state)
   :flag (nth 12 state))) 
  (incrementa-pc state)))

(defun store (state) 
 ((lambda (pc)
      (list 'STATE
      :acc (nth 2 state)
      :pc pc
      :mem (replace mem acc :start1 (- pc 2) :end1 (- pc 2)  ) 
      :in (nth 8 state)
      :out (nth 10 state)
      :flag (nth 12 state)))
      (incrementa-pc state)))
